<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Terms Archive documentation</title><link>https://docs.opentermsarchive.org/</link><description>Recent content on Open Terms Archive documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://docs.opentermsarchive.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Deployment architecture</title><link>https://docs.opentermsarchive.org/deployment/reference/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/deployment/reference/architecture/</guid><description>Deployment architecture This document provides an overview of the key components and elements involved in the deployment process of a collection.
Repository structure 🔗 A collection is defined by three repositories that work together to manage and track terms.
The declarations repository, &amp;lt;collection_name&amp;gt;-declarations, serves as the primary workspace for collection maintainers, containing declarations of the terms to track along with engine and deployment configurations.
This repository is complemented by two automatically managed repositories:</description></item><item><title>Benefits</title><link>https://docs.opentermsarchive.org/federation/benefits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/federation/benefits/</guid><description>Open Terms Archive federation Open Terms Archive is a decentralised system. It aims at enabling any entity set up their own collections and track terms on their own.
In order to maximise discoverability, collaboration and political power, public collections are federated within a single ecosystem. This makes their data mutually discoverable and enables mutualising effort.
Benefits of joining the federation 🔗 A collection that joins the federation enjoys the following benefits:</description></item><item><title>Command line interface</title><link>https://docs.opentermsarchive.org/api/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/api/cli/</guid><description>Command line interface Once the engine module is installed as a dependency within another module, the ota command with the following subcommands is available.
In these commands:
&amp;lt;service_id&amp;gt; is the case sensitive name of the service declaration file without the extension. For example, for Twitter.json, the service ID is Twitter. &amp;lt;terms_type&amp;gt; is the property name used under the terms property in the declaration to declare a terms. For example, in the getting started declaration, the terms type declared is Privacy Policy.</description></item><item><title>Create a collection</title><link>https://docs.opentermsarchive.org/collections/how-to/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/how-to/create/</guid><description>How to create a collection You are considering creating a new collection to track terms with Open Terms Archive? Amazing!
Define metadata 🔗 First of all, define the metadata of the collection you would like to create and keep them ready to be used when setting up the repositories.
Check existing collections 🔗 Now that you have a clear idea what you would like to track, double-check that there are no existing federated collections that you could contribute to.</description></item><item><title>Create your first collection</title><link>https://docs.opentermsarchive.org/collections/tutorial/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/tutorial/create/</guid><description>Create your first collection This tutorial will guide you through creating your first Open Terms Archive collection.
By the end, you&amp;rsquo;ll have a working collection that tracks changes to a service&amp;rsquo;s privacy policy. You will also have a basic understanding of how to create a collection.
Prerequisites 🔗 Node.js is installed on your system. You have basic familiarity with the command line. You know how to use a text editor.</description></item><item><title>Deploy a collection</title><link>https://docs.opentermsarchive.org/deployment/how-to/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/deployment/how-to/deploy/</guid><description>How to deploy a collection This guide will help you deploy an Open Terms Archive collection to a server. The deployment is automated using Ansible and will set up the Open Terms Archive engine and configure it to track your collection&amp;rsquo;s terms.
Prerequisites 🔗 Before starting, ensure you have:
A basic understanding of the deployment architecture A server with admin access All collections repositories created, if not, see the guide to create repositories At least one declaration added to your collection A GitHub user account to automate actions such as committing entries in versions and snapshots repositories, reporting issues when tracking fails, publishing releases… Ansible installed on your local machine 1.</description></item><item><title>Governance</title><link>https://docs.opentermsarchive.org/collections/reference/governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/reference/governance/</guid><description>Collection governance Setting up and maintaining a collection entails fulfilling specific tasks. These tasks are handled through roles. Each of these roles can be volunteer or paid, and can be handled by one or several different entities.
This reference documentation details all roles that must be involved in a collection&amp;rsquo;s governance to ensure its proper operation and maintenance.
Roles 🔗 Host 🔗 Ensures the availability of the infrastructure required for the collection&amp;rsquo;s operation.</description></item><item><title>Main concepts</title><link>https://docs.opentermsarchive.org/concepts/main/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/concepts/main/</guid><description>Main concepts 🔗 Words in bold are business domain names.
Services have terms written in documents, contractual (Terms of Services, Privacy Policy…) or not (Community Guidelines, Deceased User Policy…), that can change over time. Open Terms Archive enables users rights advocates, regulatory bodies and interested citizens to follow the changes to these terms, to be notified whenever a new version is published, to explore their entire history and to collaborate in analysing them.</description></item><item><title>Navigate history</title><link>https://docs.opentermsarchive.org/analysis/how-to/navigate-history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/analysis/how-to/navigate-history/</guid><description>How to navigate history Screencast 🔗 Learn how to navigate through versions history in this 4 minutes video, or scroll below for the textual version.
Manual 🔗 Every collection offers a public database of versions they recorded.
For this guide, we will use the example of the Demo collection. The terms of this collection are published on the OpenTermsArchive/demo-versions repository.
From the repository page, open the folder of the service of your choice by clicking on it.</description></item><item><title>Node.js module</title><link>https://docs.opentermsarchive.org/api/node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/api/node/</guid><description>Node.js module As a Node module dependency, the engine exposes a JavaScript API that can be called in your own code.
Classes 🔗 SourceDocument new SourceDocument(params) Functions 🔗 extract(sourceDocument) ⇒ Promise.&amp;lt;string&amp;gt; launchHeadlessBrowser() ⇒ Promise.&amp;lt;puppeteer.Browser&amp;gt; stopHeadlessBrowser() ⇒ Promise.&amp;lt;void&amp;gt; fetch(params) ⇒ Promise.&amp;lt;{mimeType: string, content: (string|Buffer)}&amp;gt; SourceDocument 🔗 Kind: global class
new SourceDocument(params) 🔗 Represents a source document containing web content and metadata for extraction.
Includes the document location, selectors for content inclusion/exclusion,</description></item><item><title>Understanding terms types</title><link>https://docs.opentermsarchive.org/terms/explanation/terms-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/explanation/terms-types/</guid><description>Terms types: a foundation of a consistent archive What are terms types? 🔗 Terms types are standardized categories that classify the different kinds of terms and conditions documents, serving as a common language for organizing and comparing terms across services.
Why standardized terms types are needed 🔗 Services often use different names for the same type of terms. For instance, &amp;ldquo;Terms and Conditions&amp;rdquo; might be called &amp;ldquo;Terms of Use&amp;rdquo; or &amp;ldquo;Terms of Service&amp;rdquo; by different services.</description></item><item><title>Track new terms</title><link>https://docs.opentermsarchive.org/terms/how-to/track-terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/track-terms/</guid><description>How to track new terms This is a step by step guide to help you add declarations to the contrib-declaration repository. This repository is dedicated for volunteer contribution of declarations to Open Terms Archive.
Having understood briefly how a declaration is structured in JSON format, we need to look at concrete steps on how you can add these JSON files to the repository.
Prerequisites 🔗 In order to add declarations:</description></item><item><title>Collection REST API</title><link>https://docs.opentermsarchive.org/api/collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/api/collection/</guid><description>Collection REST API As Open Terms Archive is decentralised, each instance embarks its own API. The documentation relevant to the specific version of the engine on that instance is provided on that instance itself.
The Collection API exposes JSON data over HTTP. Its OpenAPI specification can be found at http://localhost:&amp;lt;port&amp;gt;/&amp;lt;basePath&amp;gt;/&amp;lt;API version&amp;gt;/docs.
That endpoint exposes both the OpenAPI specification if the requested Content-Type is JSON, and a Swagger UI for visual and interactive documentation otherwise.</description></item><item><title>Create repositories</title><link>https://docs.opentermsarchive.org/collections/how-to/create-repositories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/how-to/create-repositories/</guid><description>How to create collection repositories Collections in Open Terms Archive rely on three Git repositories to hold the data:
Declarations repository: stores the declarations that define terms to track Snapshots repository: stores raw snapshots of tracked terms Versions repository: stores processed versions of tracked terms This guide assumes you use GitHub. For other Git platforms, adapt these steps accordingly.
Prerequisites 🔗 Before starting, ensure you have:
A GitHub account with permissions to create repositories Your collection ID and name defined Your collection metadata prepared Create declarations repository 🔗 Create from template 🔗 Go to the demo-declarations repository Click &amp;ldquo;Use this template&amp;rdquo; dropdown and select &amp;ldquo;Create a new repository&amp;rdquo; Name it &amp;lt;collection_id&amp;gt;-declarations (e.</description></item><item><title>Design principles</title><link>https://docs.opentermsarchive.org/concepts/design-principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/concepts/design-principles/</guid><description>Design principles These overarching principles guide technical and governance decisions. They are fundamental and can only be changed through community consensus, based on a thorough impact assessment.
Each principle has a name, a rationale, and potential implementation examples or guidelines.
1. Never trust the services 🔗 A major goal of Open Terms Archive is to enable assessing the loyalty of services towards their end users. Since loyalty is not assumed, trust can not be warranted.</description></item><item><title>Metadata</title><link>https://docs.opentermsarchive.org/collections/reference/metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/reference/metadata/</guid><description>Collection metadata This reference documentation details all available metadata fields that can be specified in a collection&amp;rsquo;s metadata file.
The examples given throughout this reference can be seen in context in the complete metadata file and rendered in the collection page of the Demo collection.
Fields 🔗 id string required Unique identifier derived from name (acronyms, dash-separated). Example: demo name string required Display name of the collection. Example: Demo Collection tagline string required Concise description of collection topic.</description></item><item><title>Server specifications</title><link>https://docs.opentermsarchive.org/deployment/reference/server-specifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/deployment/reference/server-specifications/</guid><description>Server specifications The minimum recommended server specifications are:
2GB RAM 1CPU @ 2GHz 10GB storage Approximately 750MB of storage is required for the engine itself, with the remaining space allocated for data generated by the engine.
Storage growth 🔗 Storage requirements typically grow at a rate of less than 0.5MB per tracked terms per month on average. This growth rate varies depending on the type of service being tracked:</description></item><item><title>Set up GitHub teams</title><link>https://docs.opentermsarchive.org/deployment/how-to/setup-github-teams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/deployment/how-to/setup-github-teams/</guid><description>How to set up GitHub teams for a collection This guide explains how to configure GitHub teams and permissions for a new collection in the Open Terms Archive organization. For third-party collections outside the organization, you can handle permissions according to your own needs.
Prerequisites 🔗 Admin access to the OpenTermsArchive GitHub organization The collection name and icon List of team members to add The three collection repositories (declarations, snapshots, versions) already created Steps 🔗 Create the collection team:</description></item><item><title>How to track terms using the graphical contribution interface</title><link>https://docs.opentermsarchive.org/terms/how-to/track-terms-using-ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/track-terms-using-ui/</guid><description>How to track terms using the graphical contribution interface Screencast 🔗 Learn how add terms with the graphical contribution interface in this 6 minutes video.
Manual 🔗 Blank page when contacting support 🔗 While using the graphical user interface for contribution, you may come across a blank page when trying to contact the team.
This may be caused by the lack of a mail program being set up in your browser.</description></item><item><title>Configuration</title><link>https://docs.opentermsarchive.org/collections/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/reference/configuration/</guid><description>Configuration options This reference documentation details all available configuration options that can be specified in a collection&amp;rsquo;s configuration file to configure the Open Terms Archive engine.
As an example, see the production configuration file of the Demo collection.
Options 🔗 trackingSchedule string Defines how often the engine should check for changes in terms. Uses standard cron syntax to set the schedule. By default, it runs every 12 hours at minute 30.</description></item><item><title>Criteria</title><link>https://docs.opentermsarchive.org/federation/reference/criteria/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/federation/reference/criteria/</guid><description>Federation criteria A collection can join the Open Terms Archive federation if it abides by the following quality criteria:
Clearly defined collection metadata. Clearly defined collection governance. The vast majority of versions are readable, as evidenced by a sample assessment. Frequency of at least one track a day, as evidenced by snapshots. Public and open-licensed declarations, as evidenced by the LICENSE file in the declarations repository. Public and open-licensed snapshots, as evidenced by the LICENSE file in the snapshots repository.</description></item><item><title>Define metadata</title><link>https://docs.opentermsarchive.org/collections/how-to/define-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/how-to/define-metadata/</guid><description>How to define metadata This guide will help you define the metadata for your Open Terms Archive collection.
Prerequisites 🔗 A text editor. Basic understanding of the YAML syntax. Your collection&amp;rsquo;s basic information ready. Steps 🔗 Create a new file named metadata.yml in your collection&amp;rsquo;s root directory.
Define the required basic information:
name: &amp;#34;Your Collection Name&amp;#34; # Keep it under 3 words id: &amp;#34;your-collection-id&amp;#34; # Create a simple dash-separated identifier tagline: &amp;#34;Brief description&amp;#34; # Write a one-line collection summary languages: [&amp;#34;en&amp;#34;] # List ISO 639 language codes jurisdictions: [&amp;#34;US&amp;#34;] # List ISO 3166-2 country codes Add detailed description and repositories URLs:</description></item><item><title>Federation REST API</title><link>https://docs.opentermsarchive.org/api/federation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/api/federation/</guid><description>Federation REST API Open Terms Archive is a decentralised system that tracks collections of services&amp;rsquo; terms across multiple servers. Each collection operates its own API, and the Federation API unifies search and discovery across collections, fostering collaboration with external applications.
The Federation API exposes JSON data over HTTP. Its documentation is provided in a dedicated, interactive interface.
That endpoint exposes both the OpenAPI specification if the requested Content-Type is JSON, and a Swagger UI for visual and interactive documentation otherwise.</description></item><item><title>Join the federation</title><link>https://docs.opentermsarchive.org/federation/how-to/join/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/federation/how-to/join/</guid><description>How to join the federation An official request for joining the federation can be sent by the collection administrator or curator to the core team over email, GitHub or instant messages. That request should contain all necessary content or links that enable assessing the criteria.
The core team will confirm reception of the request and assess the criteria within 4 weeks. The result of the assessment will be provided to the requester through the same means the request was sent, along with a positive decision or a list of improvements that need to be done before a new request can be sent.</description></item><item><title>How to test your declarations</title><link>https://docs.opentermsarchive.org/terms/how-to/test-declarations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/test-declarations/</guid><description>How to test your declarations When creating or modifying service declarations, it’s important to verify they work as expected before starting to track in production. The Open Terms Archive engine provides automated testing tools to that end.
The basic usage to test all declarations in a collection is:
npx ota validate declarations Testing specific services 🔗 When iterating over a specific declaration, or to narrow down testing in larger collections, the --services and --terms options enable testing a single service declaration, or even single terms:</description></item><item><title>How to be notified of terms changes</title><link>https://docs.opentermsarchive.org/terms/how-to/be-notified/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/be-notified/</guid><description>How to be notified of terms changes An RSS feed is a type of web page that contains information about the latest content published by a website, such as the date of publication and the address where you can view it. When this resource is updated, a feed reader app automatically notifies you and you can see the update. You can receive notification for a specific service or document by subscribing to RSS feeds.</description></item><item><title>Environment variables</title><link>https://docs.opentermsarchive.org/collections/reference/environment-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/reference/environment-variables/</guid><description>Environment variables 🔗 This reference documentation details all available environment variables that can be used to configure sensitive information. These variables can be defined in a .env file at the root of the collection repository.
Engine 🔗 OTA_ENGINE_SMTP_PASSWORD string SMTP password for email error notifications. OTA_ENGINE_SENDINBLUE_API_KEY string API key for SendInBlue. OTA_ENGINE_GITHUB_TOKEN string GitHub token for API access. OTA_ENGINE_GITLAB_TOKEN string GitLab token for API access. OTA_ENGINE_GITLAB_RELEASES_TOKEN string GitLab token for dataset releases.</description></item><item><title>Manage a custom terms type</title><link>https://docs.opentermsarchive.org/terms/how-to/manage-custom-terms-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/manage-custom-terms-type/</guid><description>How to manage a custom terms type When tracking terms and conditions across different services, you might encounter situations where a service uses terms types that aren&amp;rsquo;t yet supported by Open Terms Archive.
This guide will help you handle these custom terms types effectively, whether you&amp;rsquo;re working on a new collection or expanding an existing one.
To better understand what terms types are and how they work, you can read our detailed explanation.</description></item><item><title>Terminate a collection</title><link>https://docs.opentermsarchive.org/collections/how-to/terminate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/how-to/terminate/</guid><description>How to terminate a collection If you don&amp;rsquo;t have the resources to maintain a collection anymore, follow these steps to properly terminate it. This will make it clear to users and potential successors that it is no longer actively maintained and can be taken over.
Steps 🔗 Announce the intention to terminate the collection in the community chat to inform users and make potential new maintainers aware. Give at least one month notice to that others have time to share their intention to take over the collection before proceeding to the next step.</description></item><item><title>How to rename a service</title><link>https://docs.opentermsarchive.org/terms/how-to/rename-a-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/rename-a-service/</guid><description>How to rename a service The consensus is to consider that a service provider renaming a service (for example, Twitter to X) is akin to terminating the previous service and opening a new one. Therefore, to apply a service renaming, open a pull request that both terminates the previous service and adds a new service declaration with the new service name. You can reuse the terms part of the original declaration, but should double-check that the selectors and URLs still match, as a service rename is most often accompanied by a new page layout, a new domain name, and sometimes entirely new terms.</description></item><item><title>Status</title><link>https://docs.opentermsarchive.org/collections/reference/status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/reference/status/</guid><description>Collection status This reference documentation outlines the different status levels that a collection can have within the system. Understanding these statuses is crucial for users to assess a collection&amp;rsquo;s quality and reliability.
Active 🔗 The optimal operational state for a collection.
The collection saves records regularly through actively maintained and updated terms declarations. The number of tracked terms remains stable or increases over time. The versions quality is high. Technical maintenance includes regular dependency updates, access to the latest engine features, and benefits from all infrastructure updates.</description></item><item><title>Take over a collection</title><link>https://docs.opentermsarchive.org/collections/how-to/take-over/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/collections/how-to/take-over/</guid><description>How to take over a collection Before starting, ensure the collection is either abandoned or terminated. In any case, keep all original licenses, history, and attributions.
Steps 🔗 If the approval is not explicitly given in the collection&amp;rsquo;s README, get it by contacting owners via email if publicly available, a GitHub issue on the collection repository, or on the community chat.
Ask the owners to transfer the repositories to your organization.</description></item><item><title>Declarations maintenance</title><link>https://docs.opentermsarchive.org/terms/explanation/declarations-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/explanation/declarations-maintenance/</guid><description>Declarations maintenance All parts of a terms declaration (web location, selection, noise removal, distribution across multiple documents…) can change over time. The process of updating these elements to enable continued tracking is called maintenance. Without it, terms can become:
unreachable: no snapshot can be recorded at all, because the location changed or the service denies access; unextractable: no version can be extracted from the snapshot, because the selection of content or some filter fails; noisy: both snapshots and versions are recorded but the changes contain noise that should have been filtered out.</description></item><item><title>How to terminate a service</title><link>https://docs.opentermsarchive.org/terms/how-to/terminate-a-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/terminate-a-service/</guid><description> How to terminate a service If the service provider stops offering a service, the associated terms will become unavailable. To mark that service termination in Open Terms Archive and ensure tracking tentatives are stopped, while maintaining the possibility to explore the history:
Move the existing terms declaration to the service history file. Update the declaration to stop tracking all terms, by removing every &amp;lt;terms type&amp;gt; entries from the terms key in the declaration: { &amp;#34;name&amp;#34;: &amp;#34;&amp;lt;service name&amp;gt;&amp;#34;, &amp;#34;terms&amp;#34;: {} }</description></item><item><title>How to get the `validUntil` date</title><link>https://docs.opentermsarchive.org/terms/how-to/get-the-validuntil-date-from-an-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/how-to/get-the-validuntil-date-from-an-issue/</guid><description>How to get the validUntil date From a GitHub issue 🔗 Go to the open issue and scroll to the last action from OTA-Bot (comment or issue opening).
Note that sometimes:
the date is not quite precise, it can be written &amp;ldquo;last month&amp;rdquo;
the last comment may be the announcement of the reopening of the issue
On the date of this comment, right-click &amp;ldquo;inspect&amp;rdquo; to open your browser&amp;rsquo;s code inspector.</description></item><item><title>Choosing selectors</title><link>https://docs.opentermsarchive.org/terms/guideline/choosing-selectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/guideline/choosing-selectors/</guid><description>Choosing selectors Selectors are used in Open Terms Archive declarations to specify the parts of documents that should be recorded.
What are selectors 🔗 Selectors are used in the select and remove keys of an Open Terms Archive declaration.
The “selectors” referred to are defined by the W3C Selectors standard, more commonly known as “CSS Selectors”.
An easy-to-read introduction to CSS Selectors can be found on mdn web docs.</description></item><item><title>Community call</title><link>https://docs.opentermsarchive.org/community/reference/community-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/community/reference/community-call/</guid><description>Community call The Open Terms Archive Community Call is a monthly online meeting for and by the community.
Ambitions 🔗 Get up-to-date: the core team will open the call by highlighting the latest features and updates. Discover collections: on each call, a maintainer will present their collection. Get support: the core team will be available to help you track and maintain existing collections. Frequency and format 🔗 When: First Wednesday of the month Time: 09:00 - 10:00 UTC Duration: 1 hour Join link: https://meet.</description></item><item><title>Declaring terms</title><link>https://docs.opentermsarchive.org/terms/guideline/declaring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/guideline/declaring/</guid><description>Declaring terms Service name 🔗 Casing 🔗 In order to find the service name casing, rely first on the page title (easily found in search results). Do not rely on the logo as it can be stylized differently. Example with Facebook:
If it is still ambiguous, rely on Wikipedia as a source. However, make sure to differentiate the service from the provider company&amp;rsquo;s name. Example with “DeviantArt”, a service (which used to be stylized deviantArt until 2014) by the limited liability company “deviantArt”:</description></item><item><title>Filters</title><link>https://docs.opentermsarchive.org/terms/reference/filters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/reference/filters/</guid><description>Filters Some documents require more complex filtering beyond basic element selection and removal. For example, web pages often contain dynamically generated content like tracking IDs in URLs that change on each page load. While these elements are part of the page, they are not meaningful to the terms content itself. If such dynamic content is included in the archived versions, it creates a lot of insignificant versions and pollutes the archive with noise that makes it harder to identify actual changes to the terms.</description></item><item><title>Join the community chat</title><link>https://docs.opentermsarchive.org/community/how-to/join/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/community/how-to/join/</guid><description>How to join the community chat The Open Terms Archive community concentrates interactions on an instant chat platform where every contributor and user is welcome. The following how-to guide will help you get into the community chat.
1. Create an account 🔗 Use this invitation link and create an account.
After successful login, you will be automatically be added to the ~Announcements channel.
2. Profile setup 🔗 Once you&amp;rsquo;re all set, the next thing is to set up your profile.</description></item><item><title>Memo copywriting reference</title><link>https://docs.opentermsarchive.org/analysis/reference/copywriting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/analysis/reference/copywriting/</guid><description>Memo copywriting Each memo must be composed of the elements detailed below. You must follow this structure when writing your memos.
Title 🔗 Write a short declarative sentence to highlight the key change. 140 characters maximum. Use the name of the service as the subject. Write in the present tense. Prefer active phrasings over passive (e.g., “Microsoft expands reach” rather than “Reach expanded by Microsoft“). Describe the policy change, not the name of the document.</description></item><item><title>Publish a memo</title><link>https://docs.opentermsarchive.org/analysis/how-to/publish-memo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/analysis/how-to/publish-memo/</guid><description>How to publish a memo This guide will help you publish a memo on opentermsarchive.org/en/memos.
No technical skills are required.
Prerequisites 🔗 A drafted memo compliant with the copywriting reference. 1. Send 🔗 Send your memo by writing it in the body of the email or as a file attachment. Feel free to add any comments or questions you may have about the content or format.
2. Review 🔗 The Open Terms Archive core team will review your memo as quickly as possible.</description></item><item><title>Range selectors</title><link>https://docs.opentermsarchive.org/terms/explanation/range-selectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/explanation/range-selectors/</guid><description>Range selectors 🔗 When no unique wrapper element exists for the whole terms content, there is no easy way to select the content with only CSS selectors. Content between two elements in a document can be selected using a range selector, regardless of their DOM position. The concept is inspired by the DOM Range API, where content is defined by start and end points that may be included or excluded.</description></item><item><title>Reviewing contributions</title><link>https://docs.opentermsarchive.org/terms/guideline/reviewing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/guideline/reviewing/</guid><description>Reviewing contributions Thank you for showing interest in reviewing contributions made to Open Terms Archive. This document is intended to help you get started and provide some guidelines for reviewing contributions.
Why is this important? 🔗 We want to make sure that the contributions made to the project are of high quality and that they are in line with the vision of the project. We also want to make sure that the contributions are reviewed in a timely manner so that the contributors can get feedback and continue to contribute to the project.</description></item><item><title>Service declaration</title><link>https://docs.opentermsarchive.org/terms/reference/declaration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/reference/declaration/</guid><description>Service declaration This reference documentation details all available properties that can be specified in a service&amp;rsquo;s declaration file.
The examples given throughout this reference can be seen in context in the declarations files from the Demo collection
Properties 🔗 name string required The name of the service. Example: Open Terms Archive terms object of objects required Map of terms associated with a service, where keys are standardized term types (e.</description></item><item><title>Targeting</title><link>https://docs.opentermsarchive.org/terms/guideline/targeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/guideline/targeting/</guid><description>What to track? Can I track terms that are not applicable yet? 🔗 Yes.
For example, terms that would start applying at date in the future are legitimate candidates for tracking. You can this way track if their terms change even before they are applied.</description></item><item><title>Track your first terms</title><link>https://docs.opentermsarchive.org/terms/tutorial/track/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.opentermsarchive.org/terms/tutorial/track/</guid><description>Track your first terms This tutorial will guide you through tracking your first terms.
By the end, you&amp;rsquo;ll have tracked a service&amp;rsquo;s privacy policy. You will also have a basic understanding of how to run the engine to track terms.
Prerequisites 🔗 Node.js is installed on your system. You have basic familiarity with the command line. You have basic familiarity with HTML and CSS selectors. You know how to use a text editor.</description></item></channel></rss>